	; Написать  два исходных модуля на языке Ассемблер первый
; из которых содержит главную процедуру, а второй - вспомогательную.
     ; Главная процедура  подготавливает  исходные данные для вспомога-
; тельной процедуры и вызывает ее.  Все необходимые для работы перемен-
; ные описываются   в  модуле главной процедуры и являются внешними для
; вспомогательной процедуры.   Вспомогательная  процедура  осуществляет
; преобразование данных,   переданных ей главной процедурой в соответс-
; твии с вариантом задания. Передача параметров во вспомогательную про-
; цедуру организуется через стек.  Все необходимые вспомогательной про-
; цедуре переменные должны быть организованы как локальные и  размещены
; в стеке.  Вспомогательная процедура использует стек главной процедуры
; и не имеет собственного сегмента данных.

    ; Действия вспомогательной процедуры, количество и вид передаваемых
; ей параметров выбираются из в таблицы 1 в соответствии с вариантом за-
; дания.

    ; Лабораторная работа выполняется в два этапа: сначала подготавли-
; вается вспомогательная процедура и осуществляется ее отладка.   После
; этого вспомогательная  процедура в соответствии с заданием помещается
; в отдельный модуль, подготавливается главная процедура, осуществляет-
; ся их раздельная компиляция и редактирование связей полученных объек-
; тных модулей.  Описанная в данном абзаце последовательность  действий
; не обязательная, а рекомендуемая.

    ; Вспомогательная процедура должна сохранять все  используемые
; регистры, и возвращать в регистре AX нулевое значение если преобразо-
; вание прошло успешно и ненулевое если при преобразовании была обнару-
; жена ошибка (например, значение заданного в символической форме числа
; не может быть размещено в требуемом количестве разрядов и т.п.).

; Вид исходных данных:
   ; 1.3. Содержимое переменной размером в двойное слово.
	
; Исходные данные необходимо преобразовать в
   ; 2.8. Символьноле представление в восьмеричном формате со знаком.
 
.MODEL	small

DATA SEGMENT PARA PUBLIC 'data'
	printBuffer			DW			?
	chars				DB			8+1	
	charsR				DB			?
	charsBuffer		DB			8+1 DUP(?)
	input					DD 			?
	tmp					DB			?
	fileName			DB 			"out.txt", 0
	fileHandler			DW			?
	menuCaption	DB			"Select color:", 10, 13, "$"
	menu1				DB			" 1) white", 10, 13, "$"
	menu2				DB			" 2) green", 10, 13, "$"
	menu3				DB			" 3) red", 10, 13, "$"
	
DATA ENDS

STACK SEGMENT PARA STACK 'stack'
	DB 100h DUP(0)
STACK ENDS

CODE SEGMENT PARA PUBLIC 'code'
	.486
	ASSUME CS: CODE, DS: DATA, SS: STACK
	
EXTERN newLine:NEAR
EXTERN readInput:NEAR
EXTERN openFile:NEAR
EXTERN printResult:NEAR
	
START:
	MOV AX, DATA				
	MOV DS, AX
	
PART1:
	PUSH OFFSET input
	PUSH OFFSET menu3
	PUSH OFFSET menu2
	PUSH OFFSET menu1
	PUSH OFFSET menuCaption
	PUSH OFFSET chars
	CALL readInput
	
	PUSH OFFSET fileHandler
	PUSH OFFSET fileName
	CALL openFile
	
	PUSH fileHandler
	PUSH OFFSET printBuffer
	PUSH input
	CALL printResult
	
	MOV AH, 3eh ; закрытие файла
	MOV BX, fileHandler
	INT 21h
	
EXIT:
	MOV EAX, 4C00h				
	INT 21h					
CODE ENDS
	
END START